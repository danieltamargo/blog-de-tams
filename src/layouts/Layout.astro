---
import BackgroundPattern from '../components/BackgroundPattern.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { ViewTransitions, fade } from 'astro:transitions';
import CardDani from '@components/CardDani.astro';
import Ratings from '@components/Ratings.astro';

interface Props {
	title: string;
	showInfo?: boolean;
}

const { title, showInfo = true } = Astro.props;
---
<!doctype html>
<html lang="es">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="A modern developer blog" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<ViewTransitions />
	</head>
	<body class="min-h-svh w-screen bg-gray-50 overflow-x-hidden">
		<BackgroundPattern transition:animate={fade({ duration: '0' })} />
		<div class="fixed top-0 left-0 w-full h-full overflow-hidden" transition:persist>
      <div id="blurred-blob-that-follows-the-mouse-hehe">
        <!-- Inspired by Hyperplexed video -->
      </div>
    </div>

		<Header transition:animate={fade({ duration: '0' })} />
		<div class="flex flex-col items-center xl:items-start xl:flex-row xl:flex-wrap xl:justify-center gap-6 max-w-[100svw] w-7xl py-12 px-6 mx-auto">
      <!-- Personal card aside -->
			{showInfo && <CardDani transition:animate={fade({ duration: '0' })} transition:persist />}
	
			<main class="max-w-full w-4xl">
				<slot />
			</main>

      <div class="hidden border-4 border-blue-500"></div>
		</div>

    <Ratings transition:animate={fade({ duration: '0' })} />

		<Footer transition:animate={fade({ duration: '0' })} />
	</body>
</html>

<script type="module">
  class CustomNotification {
    constructor(
      id,
      type,
      title,
      message,
      duration = 5000,
      expiresAutomatically = true,
    ) {
      this.id = id;
      this.type = type;
      this.title = title;
      this.message = message;
      this.duration = duration;
      this.expiresAutomatically = expiresAutomatically;
    }

    static createCustomNotification({
      id,
      type,
      title,
      message,
      duration = 5000,
      expiresAutomatically = true,
    }) {
      return new CustomNotification(
        String(this.idCounter),
        type,
        title,
        message,
        duration,
        expiresAutomatically,
      );
    }

    get notificationId() {
      return "notification-" + this.id;
    }

    show() {
      const notificationDiv = document.createElement("div");
      notificationDiv.id = this.notificationId;
      notificationDiv.classList.add("custom-notification", this.type);
      notificationDiv.style = `--custom-notification-duration: ${this.duration}ms`;
      notificationDiv.innerHTML = `
              <div class="alert-content">
                  <h3>${this.title}</h3>
                  <p>${this.message}</p>
              </div>
          `;
      window.CustomNotificationManager.alertsContainerDiv.appendChild(
        notificationDiv,
      );

      setTimeout(() => {
        this.delete();
      }, this.duration);
    }

    delete() {
      try {
        window.CustomNotificationManager.removeNotificatonById(this.id);
        document.getElementById(this.notificationId).remove();
      } catch (error) {
        console.error(error);
      }
    }
  }

  class CustomNotificationManager {
    idCounter = 0;
    notifications = [];
    alertsContainerDiv = null;

    constructor() {
      const alertsContainerDiv = document.createElement("div");
      alertsContainerDiv.classList.add("custom-notification-container");
      document.body.appendChild(alertsContainerDiv);

      this.alertsContainerDiv = alertsContainerDiv;
    }

    removeNotificatonById(id) {
      this.notifications = this.notifications.filter((notification) => {
        notification.id !== id;
      });
    }

    addNotification({
      type,
      title,
      message,
      duration = 5000,
      expiresAutomatically = true,
    }) {
      this.idCounter++;
      const notification = CustomNotification.createCustomNotification({
        id: String(this.idCounter),
        type,
        title,
        message,
        duration,
        expiresAutomatically,
      });

      this.notifications.push(notification);
      notification.show();
    }

    addInfoNotification({
      title,
      message,
      duration = 5000,
      expiresAutomatically = true,
    }) {
      this.addNotification({
        type: "info",
        title,
        message,
        duration,
        expiresAutomatically,
      });
    }

    addSuccessNotification({
      title,
      message,
      duration = 5000,
      expiresAutomatically = true,
    }) {
      this.addNotification({
        type: "success",
        title,
        message,
        duration,
        expiresAutomatically,
      });
    }

    addWarningNotification({
      title,
      message,
      duration = 5000,
      expiresAutomatically = true,
    }) {
      this.addNotification({
        type: "warning",
        title,
        message,
        duration,
        expiresAutomatically,
      });
    }

    addErrorNotification({
      title,
      message,
      duration = 5000,
      expiresAutomatically = true,
    }) {
      this.addNotification({
        type: "error",
        title,
        message,
        duration,
        expiresAutomatically,
      });
    }
  }

  window.CustomNotificationManager = new CustomNotificationManager();

  // Ejemplos:
  /*
  window.CustomNotificationManager.addInfoNotification({
      title: "Test",
      message: "Mensaje de ejemplo",
  })
  window.CustomNotificationManager.addSuccessNotification({
      title: "Test",
      message: "Mensaje de ejemplo",
  })
  window.CustomNotificationManager.addWarningNotification({
      title: "Test",
      message: "Mensaje de ejemplo",
  })
  window.CustomNotificationManager.addErrorNotification({
      title: "Test",
      message: "Mensaje de ejemplo",
  })
  */
</script>

<script>
  const blob = document.getElementById("blurred-blob-that-follows-the-mouse-hehe");
  const initialBlobWidth = blob.offsetWidth
  const initialBlobHeight = blob.offsetHeight
  let blobCanMove = true

  // Coordenadas del mouse
  let mouseX = 0;
  let mouseY = 0;

  window.addEventListener("mousemove", (evt) => {
    if (!blobCanMove) return
    mouseX = evt.clientX;
    mouseY = evt.clientY;

    // https://developer.mozilla.org/es/docs/Web/API/Element/animate
    // https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect
    blob.animate([
      { 
        left: `${mouseX}px`,
        top: `${mouseY}px`,
      },
    ], {
      duration: 1000,
      easing: "ease-in-out",
      fill: "forwards",
    })
  })

  let blocks: NodeListOf<HTMLDivElement>|any = []
  
  const blobBlockMouseEnter = ({ target }) => {
    const block = target as HTMLDivElement
    blobCanMove = false

    const blockRect = block.getBoundingClientRect(); // Obtiene las coordenadas absolutas
    const blockCenterX = blockRect.left + blockRect.width / 2;
    const blockCenterY = blockRect.top + blockRect.height / 2;

    blob.animate([
      { 
        width: block.offsetWidth + "px",
        height: block.offsetHeight + "px",
        left: `${blockCenterX}px`,
        top: `${blockCenterY}px`,
        borderRadius: "2rem",
      },
    ], {
      duration: 250,
      easing: "ease-in-out",
      fill: "forwards",
    })
  }

  const blobBlockMouseLeave = () => {
    blobCanMove = true

    blob.animate([
      { 
        width: `${initialBlobWidth}px`,
        height: `${initialBlobHeight}px`,
      },
    ], {
      duration: 250,
      easing: "ease-in-out",
      fill: "forwards",
    })
  }

  document.addEventListener("astro:page-load", () => {
    blocks = document.querySelectorAll<HTMLDivElement>(".blob-hoverable")
    blocks.forEach((block: HTMLDivElement) => {
      block.removeEventListener("mouseenter", blobBlockMouseEnter)
      block.addEventListener("mouseenter", blobBlockMouseEnter)
  
      block.removeEventListener("mouseleave", blobBlockMouseLeave)
      block.addEventListener("mouseleave", blobBlockMouseLeave)
    })
  })
  
</script>

<style is:global>
	body {
		scrollbar-gutter: stable both-edges;
		display: grid;
		grid-template-rows: auto 1fr auto;
		grid-template-columns: 1fr;	
	}

  hr {
    margin: 1rem 0 !important;
  }

  .screen-block {
    @apply backdrop-blur-sm rounded-xl bg-white/80 shadow-sm border border-gray-100 hover:shadow-md transition-shadow;
  }

	@keyframes slide-from-left {
		from { transform: translateX(-100%); opacity: 0; }
		to { transform: translateX(0); opacity: 1; }
	}

	@keyframes slide-from-right {
		from { transform: translateX(100%); opacity: 0; }
		to { transform: translateX(0); opacity: 1; }
	}
</style>

<style>
  #blurred-blob-that-follows-the-mouse-hehe {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  
    width: 100px;
    height: 100px;
  
    border-radius: 50%;
    filter: blur(20px);
    pointer-events: none;
  
    background: radial-gradient(circle, #a8d4f9, #d4a8f9, #a8f9d4, #f9d4a8);
    background-size: 200% 200%;
    animation: smooth-gradient 2s infinite alternate;
  }
  
  @keyframes smooth-gradient {
    0% {
      background-position: 0% 50%;
    }
  
    100% {
      background-position: 100% 50%;
    }
  }
  </style>