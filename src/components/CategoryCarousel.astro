---
const categories = [
  {
    name: 'News',
    description: 'Stay ahead of the curve with the latest tech announcements, releases, and industry updates. Because FOMO in tech is real! ðŸš€',
    gradient: 'from-blue-600 to-blue-400',
    icon: 'ðŸ“°'
  },
  {
    name: 'Tips & Tricks',
    description: 'Level up your coding game with time-saving hacks and productivity boosters. Your future self will thank you! ðŸ’¡',
    gradient: 'from-green-600 to-green-400',
    icon: 'ðŸ’ª'
  },
  {
    name: 'Technical Deep Dives',
    description: 'Dive deep into complex technical concepts, because understanding the "why" is just as important as the "how". ðŸ¤¿',
    gradient: 'from-purple-600 to-purple-400',
    icon: 'ðŸ”¬'
  },
  {
    name: 'Interesting Finds',
    description: 'Discover cool projects, hidden gems, and mind-blowing dev tools that make coding more fun! âœ¨',
    gradient: 'from-pink-600 to-pink-400',
    icon: 'ðŸŽ¯'
  }
];
---
<div class="gap-2">
  <div id="category-carousel" class="relative overflow-hidden py-8 mb-12 bg-white/40 backdrop-blur-sm rounded-xl shadow-sm border border-gray-100 hover:shadow-md transition-shadow" transition:persist>
    <div class="carousel-track max-w-full flex transition-transform duration-500 ease-out">
      {categories.map((category) => (
        <div class="w-full flex-none px-4">
          <div class={`h-full p-6 rounded-lg bg-gradient-to-br ${category.gradient} text-white`}>
            <div class="text-4xl mb-2">{category.icon}</div>
            <h3 class="text-2xl font-bold mb-2">{category.name}</h3>
            <p class="text-white/90">{category.description}</p>
          </div>
        </div>
      ))}
    </div>
    
    <div class="absolute bottom-4 left-1/2 -translate-x-1/2 flex gap-2">
      {categories.map((_, index) => (
        <button
          class="w-2 h-2 rounded-full bg-gray-300 transition-colors duration-300 carousel-dot"
          data-index={index}
          aria-label={`Go to slide ${index + 1}`}
        />
      ))}
    </div>
  </div>
</div>

<script type="module">
  const carousel = document.querySelector('#category-carousel');
  const track = document.querySelector('.carousel-track');
  const dots = document.querySelectorAll('.carousel-dot');
  const slideCount = dots.length;
  let currentIndex = 0;
  const carouselIntervalTime = 4000;

  // Variables para controlar el carousel con interacciÃ³n del usuario
  let carouselInterval = null;
  let resumeCarouselTimeout = null;
  let resumeCarouselTime = carouselIntervalTime;
  let pausedTime = 0;
  let carouselIntervalStartedAt = null;

  function updateCarousel() {
    if (!track) return;
    
    pausedTime = 0;
    resumeCarouselTime = carouselIntervalTime;
    carouselIntervalStartedAt = Date.now();
    track.style.transform = `translateX(-${currentIndex * 100}%)`;
    
    dots.forEach((dot, index) => {
      if (index === currentIndex) {
        dot.classList.add('bg-gray-800');
        dot.classList.remove('bg-gray-300');
      } else {
        dot.classList.add('bg-gray-300');
        dot.classList.remove('bg-gray-800');
      }
    });
  }

  function carouselIntervalFunc() {
    currentIndex = (currentIndex + 1) % slideCount;
    updateCarousel();
  }

  if (carousel && track && dots.length > 0) {
    carouselInterval = setInterval(carouselIntervalFunc, carouselIntervalTime);

    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        currentIndex = index;
        updateCarousel();
      });
    });

    carousel.addEventListener('mouseenter', () => {
      pausedTime += carouselIntervalStartedAt ? Date.now() - carouselIntervalStartedAt : 0;

      if (carouselInterval) clearInterval(carouselInterval);
      if (resumeCarouselTimeout) clearTimeout(resumeCarouselTimeout);
    });

    carousel.addEventListener('mouseleave', () => {
      let remainigTime = resumeCarouselTime - pausedTime;
      carouselIntervalStartedAt = Date.now();
      remainigTime = remainigTime < 0 ? 0 : remainigTime;

      resumeCarouselTimeout = setTimeout(() => {
        carouselIntervalFunc();
        carouselInterval = setInterval(carouselIntervalFunc, carouselIntervalTime);
      }, remainigTime);
    });

    // Initial state
    updateCarousel();
  }
</script>