---
const categories = [
  {
    name: "Blogs, noticias y opiniones",
    description:
      "El mundo cambio y no se detiene, sobre todo en el √°mbito tecnol√≥gico. Veamos y analicemos puntos interesantes para seguir impulsando nuestro saber üöÄ",
    gradient: "from-blue-600 to-blue-400",
    quote: {
      text: "La √∫nica constante en la tecnolog√≠a es el cambio.",
      author: "Marc Benioff, CEO de Salesforce",
    },
    icon: "üì∞",
  },
  {
    name: "Profundizando en conceptos t√©cnicos",
    description:
      'Profundicemos ü§ø en algunos conceptos t√©cnicos, desde algoritmos y estructuras de datos hasta ciberseguridad y m√°s.',
    gradient: "from-purple-600 to-purple-400",
    quote: {
      text: "Vive como si fueras a morir ma√±ana. Aprende como si fueras a vivir para siempre.",
      author: "Mahatma Gandhi",
    },
    icon: "üî¨",
  },
  {
    name: "Fitness",
    description: 
      "¬°Programar no lo es todo! Vamos a <b>mantenernos en forma</b> y saludables para poder seguir creando cosas incre√≠bles.",
    quote: {
      text: "Un gran poder conlleva una gran responsabilidad",
      author: "Ben Parker",
    },
    gradient: "from-green-600 to-green-400",
    icon: "üí™",
  },
  {
    name: "Sobre m√≠",
    description:
      "Si quieres saber un poco m√°s sobre m√≠, conocer mis intereses y motivaciones, haz clic en ese botoncito de abajo.",
    gradient: "from-pink-600 to-pink-400",
    quote: {
      text: "Cuanto m√°s aprendo, m√°s veo lo que me falta por aprender, y eso solo me <b>motiva</b> a seguir aprendiendo.",
      author: "Daniel Tamargo",
    },
    icon: "üë®‚Äçüíª",
  },
];
---
<div
  id="category-carousel"
  class="relative overflow-hidden py-8 mb-12 screen-block blob-hoverable"
  transition:persist
>
  <!-- Barra de progreso para ver siguiente categor√≠a -->
  <div class="absolute top-4 left-1/2 -translate-x-1/2">
    <div class="w-9 h-2 bg-gray-300 rounded-full overflow-hidden">
      <div 
      class="h-full transition-transform duration-500 ease-out bg-gradient-to-br" 
      id="carousel-next-category-progress-bar"
      data-animation-name="carousel-next-category-progress-animation"
      />
    </div>
  </div>

  <!-- Carrousel de categor√≠as -->
  <div class="carousel-track max-w-full flex transition-transform duration-500 ease-out">
    {
      categories.map((category) => (
        <div class="w-full flex-none px-4">
          <div
            class={`h-full p-6 rounded-lg bg-gradient-to-br ${category.gradient} text-white relative`}
          >
            <div class="text-4xl absolute top-0 left-0 -translate-y-2/3">{category.icon}</div>
            <h3 class="text-2xl font-bold mb-2">{category.name}</h3>
            <p class="text-white" set:html={category.description}></p>
            {category.quote && (
              <blockquote class="text-sm text-white/90 mt-4">
                <p class="flex flex-col">
                  <span>
                    "<span class="italic" set:html={category.quote.text}></span>"
                  </span>
                  <span set:html={category.quote.author}></span>
                </p>
              </blockquote>
            )}
          </div>
        </div>
      ))
    }
  </div>

  <!-- Selector de categor√≠as -->
  <div class="absolute bottom-4 left-1/2 -translate-x-1/2 flex gap-2">
    {
      categories.map((_, index) => (
        <button
          class="w-2 h-2 rounded-full bg-gray-300 transition-colors duration-300 carousel-dot"
          data-index={index}
          data-category-bg={categories[index].gradient}
          aria-label={`Go to slide ${index + 1}`}
        />
      ))
    }
  </div>
</div>

<style>
  #carousel-next-category-progress-bar {
    width: 0;
    transition: background-color 500ms;
  }

  @keyframes carousel-next-category-progress-animation {
    0% {
      width: 0;
    }
    100% {
      width: 100%;
    }
  }
</style>

<script is:inline type="module">
  const carousel = document.querySelector("#category-carousel");
  const track = document.querySelector(".carousel-track");
  const dots = document.querySelectorAll(".carousel-dot");
  const progressBar = document.getElementById("carousel-next-category-progress-bar");
  
  let isPaused = false;
  const slideCount = dots.length;
  let currentIndex = 0;
  const carouselIntervalTime = 4000;

  // Variables para controlar el carousel con interacci√≥n del usuario
  let carouselInterval = null;
  let resumeCarouselTimeout = null;
  let resumeCarouselTime = carouselIntervalTime;
  let pausedTime = 0;
  let carouselIntervalStartedAt = null;

  let prevProgressBarBg = null;

  function updateCarousel() {
    if (!track) return;

    pausedTime = 0;
    resumeCarouselTime = carouselIntervalTime;
    carouselIntervalStartedAt = Date.now();
    track.style.transform = `translateX(-${currentIndex * 100}%)`;

    dots.forEach((dot, index) => {
      if (index === currentIndex) {
        dot.classList.add("bg-gray-800");
        dot.classList.remove("bg-gray-300");
      } else {
        dot.classList.add("bg-gray-300");
        dot.classList.remove("bg-gray-800");
      }
    });

    // Reiniciar la barra de progreso
    const categoryBg = dots[currentIndex].dataset.categoryBg;
    if (!progressBar) return;

    // Eliminar clases de gradientes anteriores
    if (prevProgressBarBg) progressBar.classList.remove(...prevProgressBarBg.split(" "));
    prevProgressBarBg = categoryBg;

    progressBar.classList.add(...categoryBg.split(" "));
    progressBar.style.animation = "none";
    void progressBar.offsetWidth;
    progressBar.style.animationName = progressBar.dataset.animationName;
    progressBar.style.animationDuration = `${carouselIntervalTime}ms`;
    progressBar.style.animationTimingFunction = "ease";
    progressBar.style.animationFillMode = "forwards";

    if (isPaused) {
      progressBar.style.animationPlayState = "paused";
    }
  }

  function carouselIntervalFunc() {
    currentIndex = (currentIndex + 1) % slideCount;
    updateCarousel();
  }

  if (carousel && track && dots.length > 0) {
    carouselInterval = setInterval(carouselIntervalFunc, carouselIntervalTime);

    dots.forEach((dot, index) => {
      dot.addEventListener("click", () => {
        currentIndex = index;
        updateCarousel();
      });
    });

    carousel.addEventListener("mouseenter", () => {
      isPaused = true;
      pausedTime += carouselIntervalStartedAt
        ? Date.now() - carouselIntervalStartedAt
        : 0;

      progressBar.style.animationPlayState = "paused";

      if (carouselInterval) clearInterval(carouselInterval);
      if (resumeCarouselTimeout) clearTimeout(resumeCarouselTimeout);
    });

    carousel.addEventListener("mouseleave", () => {
      isPaused = false;
      let remainigTime = resumeCarouselTime - pausedTime;
      carouselIntervalStartedAt = Date.now();
      remainigTime = remainigTime < 0 ? 0 : remainigTime;

      progressBar.style.animationPlayState = "running";

      resumeCarouselTimeout = setTimeout(() => {
        carouselIntervalFunc();
        carouselInterval = setInterval(
          carouselIntervalFunc,
          carouselIntervalTime,
        );
      }, remainigTime);
    });

    // Initial state
    updateCarousel();
  }
</script>